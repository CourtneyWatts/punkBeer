{"version":3,"sources":["images/beers_banner.jpg","Components/Filterbar.js","Components/Beercard.js","Components/Beercards.js","Components/Punkbeers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Filterbar","props","state","ok","className","onChange","this","value","is_expenditure","defaultValue","Component","Beercard","src","img","name","abv","description","substring","Beercards","error","isLoaded","items","sortBy","fetch","then","res","json","result","setState","message","list","sort","a","b","map","item","key","id","image_url","Punkbeers","handleSort","bind","e","console","log","target","style","backgroundImage","banner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b6f874c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beers_banner.c017c4b5.jpg\";","import React, { Component } from 'react'\nimport './filterbar.scss'\n\nclass Filterbar extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      ok: true\n    }\n  }\n\n  render () {\n    return (\n      <div className='Filterbar-container'>\n        <div className='Filterbar-sort-options'>\n          <p>Sort By: </p>\n          <select onChange={ this.props.onChange } value={this.props.is_expenditure}>\n            <option defaultValue> - - - -</option>\n            <option value='strongest'>Strength</option>\n            <option value='name'>Name</option>\n          </select>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Filterbar\n","import React from 'react'\nimport './beercard.scss'\n\nconst Beercard = (props) => {\n  return (\n    <div className='col-4'>\n      <div className='Beercard-container d-flex-col text-center mb-5'>\n        <img src={props.img} />\n        <div className='Beercard-name'>\n          <h4 className=' mt-2'>{props.name}</h4>\n        </div>\n        <p className='Beercard-abv'>Alc: {props.abv}%</p>\n        <p className='Beercard-description'>{props.description.substring(0, 98)}...</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Beercard\n","import React, { Component } from 'react'\nimport Beercard from '../Components/Beercard'\n\nclass Beercards extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      sortBy: null\n    }\n  }\n\n  componentDidMount () {\n    fetch('https://api.punkapi.com/v2/beers')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          })\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n  render () {\n    const { error, isLoaded, items } = this.state\n    if (error) {\n      return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n      return <div>Loading...</div>\n    } else {\n      let list = [...items]\n      if (this.props.sortBy === 'strongest') {\n        list = [...items].sort(function (a, b) {\n          return b.abv - a.abv\n        })\n      } else if (this.props.sortBy === 'name') {\n        list = [...items].sort(function compare (a, b) {\n          if (a.name < b.name) {\n            return -1\n          }\n          if (a.name > b.name) {\n            return 1\n          }\n          return 0\n        })\n      }\n      list = list.map(item => (\n        <Beercard key={item.id} name={item.name} img={item.image_url} description={item.description} abv={item.abv} />\n      ))\n\n      return (\n        <div className='row'>\n          {list}\n        </div>\n      )\n    }\n  }\n}\n\nexport default Beercards\n","import React, { Component } from 'react'\nimport Filterbar from './Filterbar'\nimport Beercards from './Beercards'\nimport banner from '../images/beers_banner.jpg'\n\nclass Punkbeers extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      sortBy: null\n    }\n    this.handleSort = this.handleSort.bind(this)\n  }\n\n  handleSort (e) {\n    console.log(e.target.value)\n    this.setState({\n      sortBy: e.target.value\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <div className='container-fluid banner' style={{backgroundImage: `url(${banner})` }}>\n          <h1 className>Punk Beers</h1>\n        </div>\n        <div className='container pt-5'>\n          <Filterbar onChange={this.handleSort} />\n          <Beercards sortBy={this.state.sortBy} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Punkbeers\n","import React from 'react'\nimport './App.scss'\n\nimport Punkbeers from './Components/Punkbeers'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Punkbeers />\n    </div>\n\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}